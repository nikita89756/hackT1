definitions:
  modelsSwagger.Error:
    properties:
      error:
        type: string
    type: object
  modelsSwagger.Token:
    properties:
      token:
        type: string
    type: object
  server.Chat:
    properties:
      chat_id:
        type: integer
    type: object
  server.RequestChat:
    properties:
      url:
        type: string
    type: object
  server.RequestMessage:
    properties:
      chat_id:
        type: integer
      question:
        type: string
    type: object
  server.ResponseTest:
    properties:
      answer:
        type: string
    type: object
  server.signinUser:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  storage.Chat:
    properties:
      chatID:
        type: integer
      chatName:
        type: string
      createdAt:
        type: string
      fileURL:
        type: string
      instruction:
        type: string
      modelName:
        type: string
      userID:
        type: integer
    type: object
  storage.Message:
    properties:
      aianswer:
        type: string
      chatID:
        type: integer
      messageID:
        type: integer
      question:
        type: string
      sentAt:
        type: string
      userID:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/createModelFromFile:
    get:
      consumes:
      - multipart/form-data
      description: Create a model from an uploaded file
      parameters:
      - description: File to process
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.Chat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/modelsSwagger.Error'
      security:
      - ApiKeyAuth: []
      summary: Create model from file
      tags:
      - api
  /api/createModelFromURL:
    get:
      consumes:
      - application/json
      description: Create a model from a document URL
      parameters:
      - description: URL of the document
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.RequestChat'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.Chat'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/modelsSwagger.Error'
      security:
      - ApiKeyAuth: []
      summary: Create model from URL
      tags:
      - api
  /api/getAllChats:
    get:
      consumes:
      - application/json
      description: Get all chats for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/storage.Chat'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/modelsSwagger.Error'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/modelsSwagger.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all chats
      tags:
      - api
  /api/getHistory:
    get:
      consumes:
      - application/json
      description: Get all messages from a specific chat
      parameters:
      - description: Message details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.Chat'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/storage.Message'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/modelsSwagger.Error'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/modelsSwagger.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all messages from chat
      tags:
      - api
  /api/health:
    get:
      description: Check if the API is running
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - ApiKeyAuth: []
      summary: Health check
      tags:
      - health
  /api/setMessage:
    get:
      consumes:
      - application/json
      description: Send a message and get a response
      parameters:
      - description: Message details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/server.RequestMessage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.ResponseTest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/modelsSwagger.Error'
      security:
      - ApiKeyAuth: []
      summary: Send message
      tags:
      - api
  /auth/registration:
    put:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/server.signinUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelsSwagger.Error'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/modelsSwagger.Error'
      summary: Register a new user
      tags:
      - auth
  /auth/signin:
    get:
      consumes:
      - application/json
      description: Authenticate a user and return JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/server.signinUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/modelsSwagger.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/modelsSwagger.Error'
      summary: User sign in
      tags:
      - auth
swagger: "2.0"
